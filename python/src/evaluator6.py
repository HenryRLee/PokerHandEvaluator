from src.dptables import *
from src.hashtable import *
from src.hash import hash_quinary

BINARIES_BY_ID = [
  0x1, 0x1, 0x1, 0x1,
  0x2, 0x2, 0x2, 0x2,
  0x4, 0x4, 0x4, 0x4,
  0x8, 0x8, 0x8, 0x8,
  0x10, 0x10, 0x10, 0x10,
  0x20, 0x20, 0x20, 0x20,
  0x40, 0x40, 0x40, 0x40,
  0x80, 0x80, 0x80, 0x80,
  0x100, 0x100, 0x100, 0x100,
  0x200, 0x200, 0x200, 0x200,
  0x400, 0x400, 0x400, 0x400,
  0x800, 0x800, 0x800, 0x800,
  0x1000, 0x1000, 0x1000, 0x1000,
]
SUITBIT_BY_ID = [
  0x1, 0x8, 0x40, 0x200,
  0x1, 0x8, 0x40, 0x200,
  0x1, 0x8, 0x40, 0x200,
  0x1, 0x8, 0x40, 0x200,
  0x1, 0x8, 0x40, 0x200,
  0x1, 0x8, 0x40, 0x200,
  0x1, 0x8, 0x40, 0x200,
  0x1, 0x8, 0x40, 0x200,
  0x1, 0x8, 0x40, 0x200,
  0x1, 0x8, 0x40, 0x200,
  0x1, 0x8, 0x40, 0x200,
  0x1, 0x8, 0x40, 0x200,
  0x1, 0x8, 0x40, 0x200,
]


def evaluate_6cards(a, b, c, d, e, f):
  suit_hash = 0

  suit_hash += SUITBIT_BY_ID[a]
  suit_hash += SUITBIT_BY_ID[b]
  suit_hash += SUITBIT_BY_ID[c]
  suit_hash += SUITBIT_BY_ID[d]
  suit_hash += SUITBIT_BY_ID[e]
  suit_hash += SUITBIT_BY_ID[f]

  if SUITS[suit_hash]:
    suit_binary = [0] * 4
    suit_binary[a & 0x3] |= BINARIES_BY_ID[a]
    suit_binary[b & 0x3] |= BINARIES_BY_ID[b]
    suit_binary[c & 0x3] |= BINARIES_BY_ID[c]
    suit_binary[d & 0x3] |= BINARIES_BY_ID[d]
    suit_binary[e & 0x3] |= BINARIES_BY_ID[e]
    suit_binary[f & 0x3] |= BINARIES_BY_ID[f]

    return FLUSH[suit_binary[SUITS[suit_hash] - 1]]

  quinary = [0] * 13
  quinary[(a >> 2)] += 1
  quinary[(b >> 2)] += 1
  quinary[(c >> 2)] += 1
  quinary[(d >> 2)] += 1
  quinary[(e >> 2)] += 1
  quinary[(f >> 2)] += 1
  hash_ = hash_quinary(quinary, 13, 6)

  return NOFLUSH6[hash_]
